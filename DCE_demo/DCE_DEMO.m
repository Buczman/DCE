
% DCE demo script - 2015-08-18
% (CC BY 4.0) czaj.org

clear all
clc

global B_backup; % this is for storing B in case iterations are interrupted with ctrl-c


%% ****************************  loading & specifying data ****************************


EstimOpt.DataFile = ('NEWFOREX_DCE_demo.mat');
DATA = load(EstimOpt.DataFile);


%% ****************************  loading & specifying input ****************************


INPUT.Y = DATA.Y;
INPUT.Xa = DATA.X;
% INPUT.MissingInd = DATA.SKIP;

EstimOpt.NamesA = {'SQ';'GOS'; 'CEN'; 'VIS1'; 'VIS2';'FEE' }; % Specyfy names of the attributes


%% ****************************  sample characteristics ****************************


EstimOpt.NCT = 12; % Number of choice tasks per person 
EstimOpt.NAlt = 3; % Number of alternatives
EstimOpt.NP = length(INPUT.Y)/EstimOpt.NCT/EstimOpt.NAlt; % 789; % Number of respondents


%% **************************** estimation and optimization options ****************************


[INPUT, Results, EstimOpt, OptimOpt] = DataClean(INPUT,EstimOpt);

% EstimOpt.NRep = 1e3; % number of draws for numerical simulation
% EstimOpt.eps = 1.e-9; % overall precision level
% OptimOpt.MaxIter = 1e3; % maximum number of iterations

% OptimOpt.Algorithm = 'quasi-newton'; % 'trust-region'
% EstimOpt.NumGrad = 0; % 1
% OptimOpt.GradObj = 'on'; % 'off'
% OptimOpt.FinDiffType = 'central'; % 'forward'
% OptimOpt.Hessian = 'user-supplied'; % 'off'
EstimOpt.HessEstFix = 1; % 0 = use optimization Hessian, 1 = use jacobian-based (BHHH) Hessian, 2 - use high-precision jacobian-based (BHHH) Hessian 3 - use numerical Hessian


%% ****************************     MNL     ****************************


% INPUT.Xs = [DATA.Income_1, DATA.Sex, DATA.Edu_dummy(:, 2:4), DATA.Hhadult, DATA.Age_dummy(:,2:4)];  % Covariates of scale
% INPUT.Xs = INPUT.Xs;
% EstimOpt.NamesS = {'Income'; 'Sex'; 'Edu2'; 'Edu3'; 'Edu4'; 'HHadult'; 'Age2'; 'Age3';'Age4'};

% EstimOpt.WTP_space = 1; % number of cost parameters for WTP-space estimation (need to come last in Xa)

Results.MNL.b0 = [0.159957022105421;0.486589496218975;0.609086367407496;0.0682084933928573;0.188272959734389;0.0142472931131374];

Results.MNL = MNL(INPUT,Results,EstimOpt,OptimOpt);

xlswrite('MNL.xls', Results.MNL.R_out)


%% ****************************     MXL     ****************************


% EstimOpt.Dist = zeros(size(INPUT.Xa,2)+1,1); % 0 - normal, -1 - constant, 1 - lognormal, 2 - Spike, 3 - triangular, 4 - Weibull, 5 - sinh-arcsinh, 6 - Johnson Sb, 7 - Johnson Su; the first one is for the scale parameter (include even for MXL)

DATA.Xm = [DATA.Q10, DATA.Q14]; % covariates of random parameters means
INPUT.Xm = DATA.Xm;
EstimOpt.NamesM = {'BF should be protected'; 'Visits limitation'};

EstimOpt.Scores = 1; % Predict individual-specific paramter / WTP scores using bayes rule
 
Results.MXL_d.b0 = [-3.55076938804236;0.866868314367487;1.45867921102248;0.684325536475621;1.56239321606758;0.0203222567705629;1.69082501811971;0.940419893472289;0.946987051824926;0.000880267263521202;0.704898564561587;0.160025009904792;-0.0292850354327927;0.0816454461842625;-0.260330045218203;0.0905328035568683;-0.223184571973596;-0.00541336680903266;1.26014117672378;-0.169611675636731;-0.162249549205927;-0.344526955311047;-0.560437097456512;0.00773729922291472];

Results.MXL_d = MXL(INPUT,Results,EstimOpt,OptimOpt);

xlswrite('MXL_d.xls', Results.MXL_d.R_out)


%% ****************************     MXL     ****************************


EstimOpt.FullCov = 1; % Specify if random parametrs are correlated or not (default)

Results.MXL.b0 = [-3.67841639122779;1.02919439174027;1.69053895318787;0.755726865911505;1.67243590266565;0.0262068347317378;2.74823377913414;-0.464748595396772;-0.342003845072046;-0.211184983179976;-0.287654672305689;-0.0109299720774473;0.882861969566034;0.362908971988116;-0.245116823505179;-0.0993270831468055;0.000566667224964407;0.938898085416145;0.0809830910424329;0.154931349877451;0.00242478655465148;-0.367767102664467;-0.597517888631567;0.0162399891266730;0.0898406729109649;0.0200340255187641;0.00424788593743359;0.134365617298685;0.0561150820568650;-0.282191463484518;0.0982868291602833;-0.203625035117273;-0.00867391886400750;1.16065042343329;-0.272801289511031;-0.267398408227525;-0.427498247273963;-0.693539057870490;0.00681571001412804];

Results.MXL = MXL(INPUT,Results,EstimOpt,OptimOpt);

xlswrite('MXL.xls', Results.MXL.R_out)


%% ****************************     GMXL     ****************************


EstimOpt.FullCov = 0;

% EstimOpt.Dist(1) = 5; 
 
DATA.Xt = [DATA.Q26T]; % Covariates of scale variance
INPUT.Xt = DATA.Xt;
EstimOpt.NamesT = {'Sure'};

Results.GMXL_d.b0 = [-5.50466394916762;1.24573344406003;2.04006390675628;0.916091359267958;2.16848060278937;0.0254640951575686;2.02252027125277;1.03037998111340;1.02893962113661;0.579377525246619;0.769586171673115;0.186151397833613;0.525882015265026;0.149352054989099;-0.404087073962245;0.219817325025609;-0.192879462588862;-0.00168940906423778;1.58554619652613;-0.254062762528525;-0.178141743607360;-0.510139325258131;-0.849525979341377;0.0102771284421518;-0.0832207213861379;1.96855182644823;0];

Results.GMXL_d = GMXL(INPUT,Results,EstimOpt,OptimOpt);

xlswrite('GMXL_d.xls', Results.GMXL_d.R_out)


%% ****************************     GMXL     ****************************


EstimOpt.FullCov = 1;

Results.GMXL.b0 = [-4.97231572686362;1.31262856411438;2.26932213325212;0.921278979022505;2.12062425714000;0.0271259022615436;3.50428793997685;-0.582226894043491;-0.236122848110063;-0.359794401001511;-0.403510665616776;-0.00842860897189976;1.09726039941856;0.485085436727607;-0.379323593525927;-0.226178752733404;-3.87023253363163e-05;1.12956735152755;0.200657160110708;0.240875917374358;-0.000159705275203637;-0.281242336401371;-0.656100155500200;0.0186442117305362;0.00269240025377506;0.0299128787706293;0.00267080785782920;0.124512177429160;0.0178794077113454;-0.508584278286773;0.233110650123340;-0.188987014879156;-0.00746602163181001;1.57802887754787;-0.302688726979661;-0.255624068330508;-0.593098004476025;-0.948241014937091;0.0120875898199787;-0.0781804432392860;1.29527744652482;0];

Results.GMXL = GMXL(INPUT,Results,EstimOpt,OptimOpt);

xlswrite('GMXL.xls', Results.GMXL.R_out)


%% ****************************     LC     ****************************


EstimOpt.NClass = 2; % no of classes

DATA.Xc = [DATA.Income_1, DATA.Sex, DATA.Edu_dummy(:, 2:4), DATA.Hhadult, DATA.Age_dummy(:,2:4)]; % Covariates of class probabilities (constant is added automatically)
INPUT.Xc = DATA.Xc;
EstimOpt.NamesC = {'Income'; 'Sex'; 'Edu2'; 'Edu3'; 'Edu4'; 'HHadult';  'Age2'; 'Age3';'Age4'};

% EstimOpt.WTP_space = 0;

EstimOpt.ClassScores = 1; % Predict individual-specific class membership probabilities using bayes rule

EstimOpt.BActiveClass = ones(EstimOpt.NVarA,1); % use 0 to impose coefficient equality for all latent classes
EstimOpt.BActiveClass(1) = 0;

Results.LC.b0 = [-0.844653112091913;0.615883335776026;0.774946734454666;0.269507748851202;0.359727107340635;0.0135196137298638;-0.844653112091913;-0.138852469649109;0.238926297391342;-1.04764557533077;-0.826472951576170;0.0549698052480266;-0.0876113211180419;0.227991720249515;-0.331551962617751;-0.0807431862939583;0.0618710810709223;0.343084350035940;-0.00795274174406242;0.353856109280794;-0.0447902102134332;-0.227011580646783];

Results.LC = LC(INPUT,Results,EstimOpt,OptimOpt);

xlswrite('LC.xls', Results.LC.R_out)


%% ****************************     LCMXL     ****************************


EstimOpt.FullCov = 0;

EstimOpt.Scores = 1; % Predict individual-specific paramters / probabilities using Bayes rule

Results.LCMXL_d.b0 = [-3.74694882496672;1.30705619839851;1.92556845598622;0.613376258759601;0.966860029459674;0.0433737002758462;0.513270450276485;0.281762229474891;0.332428620410349;-0.162429395766505;-0.110073595946459;0.0246226215453973;1.30316048191751;1.11171295477448;1.12837184404352;-0.282443008675831;0.881842026182410;0.185504157175637;1.52026789751759;0.694341863413004;9.69476022807201e-08;0.606060359788228;0.691122636147833;0.144623749857368;-0.577253576712155;0.168752746543154;-0.208456885167876;-1.00321511307566;-0.00920132136525448;0.341196308962431;-0.167874029648949;0.298255921496178;-0.248070566902198;0.147902911129409];

Results.LCMXL_d = LCMXL(INPUT,Results,EstimOpt,OptimOpt);

xlswrite('LCMXL_d.xls', Results.LCMXL_d.R_out)


%% ****************************     LCMXL     ****************************


EstimOpt.FullCov = 1;

Results.LCMXL.b0 = [-4.15650817188773;1.34725844576944;2.44656412250964;0.528692975880760;0.600439121007073;0.0526614622688878;0.209564410649901;0.290490849693725;0.466358659999564;-0.176231848456203;-0.178525299089649;0.0241836580828095;2.41872694372692;-0.176389387506743;0.670010175356734;-0.453818949320096;-0.569198070308796;-0.00917050711957451;1.68190682053910;0.602049122439933;-0.286284664975373;-0.200262572790746;-0.00927882053904144;1.00559582848997;0.703278423829243;1.11411967584597;-0.0172383538409688;-0.106103693329128;0.0317502238869243;-0.0282019976628477;0.250302942031082;-0.00510058551987472;0.00515862798217444;2.28835438329312;-0.379952112138723;0.0718625883117136;-0.112808922251560;-0.363700974483610;0.00434395986299072;0.578102736578476;0.392881032940088;-0.223138873730086;0.0279763511419442;0.00881726225369402;-0.274167218641366;0.405826920701559;0.127019977394616;-0.00913876536358146;0.273730198871094;0.567882833090877;-0.00632621048549467;-0.212228649668084;0.0126821368487240;-0.00826214824683525;-0.418977901054910;0.238019958149105;-0.360713084407273;-1.17086723385678;-0.261402050560964;0.108107205413021;-0.237672222605672;0.312746826127212;-0.530761419101633;0.0184406508884885];

Results.LCMXL = LCMXL(INPUT,Results,EstimOpt,OptimOpt);

xlswrite('LCMXL.xls', Results.LCMXL.R_out)


%% ****************************     MIMIC     ****************************


INPUT.Xstr = [DATA.Income_1, DATA.Sex, DATA.Edu_dummy(:, 2:4), DATA.Hhadult, DATA.Age_dummy(:,2:4)]; % Structural equations variables
INPUT.Xstr = INPUT.Xstr;
EstimOpt.NamesStr = {'Income'; 'Sex'; 'Edu2'; 'Edu3'; 'Edu4'; 'HHadult'; 'Age2'; 'Age3';'Age4'};

INPUT.Xmea =[DATA.Q10, DATA.Q11, DATA.Q12, DATA.Q14, DATA.Q15, DATA.Q26T]; % Measurment equations variables
INPUT.Xmea = INPUT.Xmea;
EstimOpt.NamesMea = {'BF should be protected'; 'Current protection is correct';'BF should be...';'Visits limitation';'Ready to bear costs'; 'Sure of choices'};

EstimOpt.NLatent = 2; % Number of latent variables
% 1 LV - pro ecological attitude
% 2 LV - sure of choices (bearing costs)

EstimOpt.MeaMatrix = [1 1 1 1 1 0; ...
                      0 0 0 0 1 1]; % Matrix which indicates which attitudes are for which latent variable

EstimOpt.MeaSpecMatrix = [2 2 1 2 2 0]; % Specify measurement equation types - 0 = OLS, 1 = MNL, 2 = ordered probit

Results.MIMIC.b0 = [0.0802964967722421;-0.0970392542492693;-0.136007899667651;-0.176853440009780;-0.0440147551844196;0.0124813838593985;0.0341149503985206;-0.111521863159015;-0.0955351676052901;-0.190343604656230;-0.222035154324878;0.0868153769629984;-0.122147784090498;-0.243734638076505;0.0524576460717277;0.00419754346121535;0.206392112034045;0.180187302959616;-0.610021364977147;1.74022499122908;0.150365707980709;-0.496853652699284;-0.371488049686603;0.0633461443081540;0.350339708846492;-0.885260429514393;-0.452383221375060;-1.73241703275315;-0.839969712241135;-3.57651986740375;-0.706362121972145;-1.05376951209319;-0.831713987865086;0.372721861133732;-1.42578946231419;0.314931988136298;-0.780923365161175;0.601021246016447;-2.33775461186765;0.623491791993492;-0.566744511039424;0.336139857724803;5.65010938833289;-1.69884039961322;0.686810288507757];

Results.MIMIC = MIMIC(INPUT,Results,EstimOpt,OptimOpt);

xlswrite('MIMIC.xls', Results.MIMIC.R_out)


%% ****************************     HMNL     ****************************


Results.HMNL.b0 = [-1.18902480009161;0.414520256341559;0.622407937949217;-0.0240237227158647;0.00864988606167404;0.0285723382509784;-1.66835829342687;0.198703405305277;0.319183472656493;0.400733068942893;0.555176705771782;-0.0180318541769887;1.77933531066058;-0.731501240907941;-0.470633081767545;0.0669315408072300;-0.0485087283614366;-0.0158080501381721;0.0827698329829182;-0.115270463535315;-0.0867076797749886;-0.0452378828662379;0.0798934850690920;0.0121353345840362;0.0143345847158510;-0.108309590896616;-0.117427422743799;-0.0612307908847460;-0.0317633413517571;0.0176333473725617;-0.264339625419375;-0.364880923345518;0.0781362566862581;-0.185418124646287;0.0626071065877446;-0.0968788273045685;-0.242377960295335;1.53184346753196;0.0261186399493788;-0.665000192493797;-0.233065298145400;0.0598595565370029;0.312196292703202;-0.916371306890032;-0.463892357427672;-1.62090900182008;-0.539559018911554;-3.52559875038446;-0.508563960430081;-0.744447074110983;-0.717181667211466;0.214720388287338;-1.55025724669172;0.177512339128406;-0.787596667121342;0.287798055788843;-2.07895160397974;0.474056753329528;-0.652831835998893;0.292899493400768;5.64846475543257;-0.721929705623000;0.921204476565007];

Results.HMNL = HMNL(INPUT,Results,EstimOpt,OptimOpt);

xlswrite('HMNL.xls', Results.HMNL.R_out)


%% ****************************     HLC     ****************************


EstimOpt.NClass = 2;

INPUT.Xc = []; % Covariates of class probabilities (constant is added automatically)
EstimOpt.NamesC = {};

Results.HLC.b0 = [1.20288662166120;0.279326968955702;0.528633037282645;-0.183801785380536;-0.304026010348648;0.0271300668164403;-1.41311397106133;0.557122051174687;0.735543783559769;0.147148789704552;0.327064338030600;0.0172406087468613;-1.03051610555569;-2.41935233799616;1.69893667971041;0.0510670230238819;-0.154110556550436;-0.325749929796228;-0.334241204435890;-0.183202635165379;0.0139577453780278;0.0488059986288654;-0.0550779892844567;-0.0560281956052057;-0.206859761675487;-0.117825423837508;-0.236334227556302;-0.400638667220515;-0.407349012154187;0.0252025236669679;-0.103862325259460;0.153230554401200;0.179755117674846;-0.471884673416119;1.64961695549563;0.0968067392497816;-0.579269624231949;-0.302738517869272;0.0614252018273758;0.330965153866827;-0.899443866977323;-0.457156724588573;-1.71475884126121;-0.790984946056515;-3.59033275665444;-0.716108123657357;-1.19738567909470;-0.902904488997868;0.446224896908205;-1.32537803934648;0.406710596022180;-0.952744373830566;1.02825532378960;-2.92604316921698;0.847733479363092;-0.329751860090065;0.555222691462908;5.64920555281792;-1.17584705991617;0.834497328985845];

Results.HLC = HLC(INPUT,Results,EstimOpt,OptimOpt);

xlswrite('HLC.xls', Results.HLC.R_out)


%% ****************************     HMXL     ****************************


EstimOpt.FullCov = 0;

INPUT.Xm = [];
EstimOpt.NamesM = {};
 
Results.HMXL_d.b0 = [-1.11311734415231;0.531900994441555;0.807356071597878;0.0306698104020865;0.0727299660563030;0.0303892301260382;1.34101454937384;0.913826864272016;0.928568665819789;-1.58469793830795e-06;0.542120102104228;-0.146562940020637;-1.40414482667616;0.167293758905441;0.171330371252380;0.425895512301625;0.697009979480951;-0.0103748520242218;1.56255294438043;-0.318102552897314;-0.290283575291267;0.126769046061226;0.0653478247561450;-0.00636765500825782;0.0629154739341223;-0.116403949562298;-0.252067105452846;-0.223111049205727;-0.0964190984364433;-0.00186615999759959;-0.0413855016623208;-0.109804984683923;-0.0568117651354508;-0.182554112674177;-0.0721397278080274;0.0592738220442835;-0.225612491067922;-0.324944625752841;0.0879139770447363;-0.0930192561703491;0.201993829116513;0.154340833402691;-0.430006930958636;1.62387424643606;0.0801627736148625;-0.594262989605522;-0.303024932575327;0.0625735050339404;0.330631003237920;-0.901630962883030;-0.461043153398540;-1.66529372530957;-0.664786571999564;-3.59106462517957;-0.681961536649034;-1.15034073958120;-0.877228375500494;0.421531697988561;-1.34281408229156;0.377259488653850;-0.886054432814312;0.740114445318998;-2.51674194167519;0.687116269958443;-0.459627761305928;0.444804335322074;5.66468690187908;-1.30903244990595;0.815855087976417];

Results.HMXL_d = HMXL(INPUT,Results,EstimOpt,OptimOpt);

xlswrite('HMXL_d.xls', Results.HMXL_d.R_out)


%% ****************************     HMXL     ****************************


EstimOpt.FullCov = 1;
 
Results.HMXL.b0 = [-1.16426799624149;0.512461789271188;0.772701858917819;-0.00544858582619564;0.0397647431737121;0.0309176871388635;-0.626773101177054;0.904752881984272;0.388028535159999;-0.230543567254021;-0.132156248913747;0.0105439304446888;-0.172169260355588;0.413191739834720;-0.250405148014599;-0.116237302626656;0.0183531157396980;-0.773769649937049;-0.183376036457266;-0.235795114206596;0.00853330199467048;-0.421255078924092;-0.478520105039720;-0.00722944122982550;-0.250146806420449;0.00479073536915082;-0.00793164099863012;-1.27558040393516;0.350341158256736;0.316491233722676;0.317371482653557;0.667207619306687;-0.00882845871617376;2.36176347309211;-0.157525972659493;-0.345293825124862;-0.214411898050195;-0.176559859771599;-0.00791980737853834;0.0598076396510559;-0.0282041961140769;-0.248693759890176;-0.285067484537887;-0.141703740099272;0.0200097152855680;0.0257001452564251;-0.0875507509276274;-0.111019079616244;-0.118423532738566;0.0967870844731743;-0.00502638341218635;-0.182881347869150;-0.289027586891647;0.0847857021946409;-0.117728790949097;0.163195091448991;-0.0731300835653546;-0.491848151546067;1.65943983193110;0.0983582243314587;-0.569850100664079;-0.324287182433120;0.0638652405985631;0.335319605139784;-0.899862202518625;-0.463610946961516;-1.71026918208442;-0.785924107325416;-3.62291697009577;-0.778425173234858;-1.29060893574180;-0.927718508613947;0.485422202653052;-1.28908575399514;0.431758091849433;-0.770787749209334;0.567417850421270;-2.22578714366065;0.553234699486660;-0.579376335724168;0.348917330799567;5.66018885361668;-0.867472381140480;0.901928539726679];

Results.HMXL = HMXL(INPUT,Results,EstimOpt,OptimOpt);

xlswrite('HMXL.xls', Results.HMXL.R_out)

